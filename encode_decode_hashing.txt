// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.12;


contract test{

    // encode and decode of single parameter or single thing
     
function en_code(string memory _a)external pure returns(bytes memory){
    return abi.encode(_a);
}

function de_code(bytes memory _a)external pure returns(string memory){
    return abi.decode(_a,(string));
}


// // encode and decode of two or more parameters or  things

function en_code2(string memory name,string memory class,uint roll)external pure returns(bytes memory){
    return abi.encode(name,class,roll);
}

function de_code2(bytes memory _a)external pure returns(string memory,string memory,uint){
    return abi.decode(_a,(string,string,uint));
}


// hashing with keccak256

function hash_en_code(string memory _a)external pure returns(bytes32){
    return keccak256(abi.encode(_a));
}

// 

function hash_een_code2(string memory name,string memory class,uint roll)external pure returns(bytes32){
    return keccak256(abi.encode(name,class,roll));
}


function verify(bytes32 _hash,string memory a,string memory b,uint c)external pure returns (bool){
    bool valid;
    if(_hash==keccak256(abi.encode(a,b,c))){
        valid=true;
    }
    return valid;
}




}